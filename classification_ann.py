# -*- coding: utf-8 -*-
"""Classification_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TRJUlzrQxiN8s6_8Z7erfqt3Corewf__

# Artificial Neural Network (ANN)

# Importation des bibliothèques
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""#Part 1 : Data Preprocessing

# Chargemement des données
"""

# x représente les variables indépendantes  qu'on sélectionne à partir de CreditScore
# y -> variable dépendante Exited
dataset = pd.read_csv("Churn_Modelling.csv")
x = dataset.iloc[:, 3:-1].values
y = dataset.iloc[:, -1].values

dataset.head()

print(x)

print(y)

"""# Traitement des variables catégorielles

##### Label Encoding de la colonne "Gender"
"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
x[:, 2] = le.fit_transform(x[:, 2])

print(x)

"""##### One Hot Encoding pour la colonne "Geography""""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
x = np.array(ct.fit_transform(x))

print(x)

"""##### Diviser le dataset en Training set et Test set"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)

"""##### Standardisation des données"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

"""#Part 2 - Construction du Réseau de neurone artificiel(ANN)

##### Initialisation du réseau de neurone artificiel
"""

# Création de la variable "ann" qui représente notre réseau de neurone artificiel
ann = tf.keras.models.Sequential()

"""##### Ajout de la couche d'entrée et de la première couche cachée"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""##### Ajout de la deuxième couche cachée"""

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

"""##### Ajout de la couche de sortie"""

ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

"""#Part 3 - Entrainer le réseau de neurone artificiel

#####Compiler le réseau de neurone
"""

ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""#####Entrainer le réseau de neurone sur le training set"""

ann.fit(x_train, y_train, batch_size = 32, epochs = 100)

"""# Part 4 - Prédiction et évaluation du modèle

##### Prédire le résultat d'une seule observation

###### Prédire si le client avec les informations ci-dessous va quitter la banque ou pas:
######Geography: France
######Credit Score: 600
######Gender: Male
######Age: 40 years old
######Tenure: 3 years
######Balance: $ 60000
######Number of Product: 2
######Credit card : yes
######Active Member : yes

######estimatedSalary: $ 50000
"""

# on obtient la probabilité si client reste ou quitte la banque
print(ann.predict(sc.transform([[1, 0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]])) > 0.5)
# la probabilité que ce client quitte la banque est de 5%, très faible probabilité
# la proba 0,05 < 0,5 (50% représente le seuil)

"""##### Prédiction sur le Test"""

# le vecteur à gauche représente y_pred 
# le vecteur à droite représente y 
y_pred = ann.predict(x_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""##### Matrice de confusion"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
# le taux de bonne réponse
accuracy_score(y_test, y_pred)

# on a 1500 bonnes prédictions que le client ne quitte pas la banque
# 211 bonnes prédictions que le client quitte la banque
# 95 false positif -> modèle prédit que ces clients quittent la banque alors que non
# 194 false négatif -> modèle prédit que ces clients ne quittent pas la banque alors que si